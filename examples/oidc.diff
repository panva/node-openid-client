diff --git a/examples/oauth.ts b/examples/oidc.ts
index 97579a5..1a6c7c9 100644
--- a/examples/oauth.ts
+++ b/examples/oidc.ts
@@ -25,13 +25,13 @@ const code_challenge_method = 'S256'
  */
 const code_verifier = client.randomPKCECodeVerifier()
 const code_challenge = await client.calculatePKCECodeChallenge(code_verifier)
-let state!: string
+let nonce!: string
 
 {
   // redirect user to as.authorization_endpoint
   const parameters: Record<string, string> = {
     redirect_uri,
-    scope: 'api:read',
+    scope: 'openid email',
     code_challenge,
     code_challenge_method,
   }
@@ -46,8 +46,8 @@ let state!: string
       .serverMetadata()
       .code_challenge_methods_supported?.includes('S256') !== true
   ) {
-    state = client.randomState()
-    parameters.state = state
+    nonce = client.randomNonce()
+    parameters.nonce = nonce
   }
 
   const redirectTo = client.buildAuthorizationUrl(config, parameters)
@@ -58,26 +58,26 @@ let state!: string
 
 // one eternity later, the user lands back on the redirect_uri
 // Authorization Code Grant
+let sub: string
 let access_token: string
 {
   const currentUrl: URL = getCurrentUrl()
   const tokens = await client.authorizationCodeGrant(config, currentUrl, {
     pkceCodeVerifier: code_verifier,
-    expectedState: state,
+    expectedNonce: nonce,
+    idTokenExpected: true,
   })
 
   console.log('Token Endpoint Response', tokens)
   ;({ access_token } = tokens)
+  const claims = tokens.claims()!
+  console.log('ID Token Claims', claims)
+  ;({ sub } = claims)
 }
 
-// Protected Resource Request
+// UserInfo Request
 {
-  const protectedResource = await client.fetchProtectedResource(
-    config,
-    access_token,
-    new URL('https://rs.example.com/api'),
-    'GET',
-  )
+  const userInfo = await client.fetchUserInfo(config, access_token, sub)
 
-  console.log('Protected Resource Response', await protectedResource.json())
+  console.log('UserInfo Response', userInfo)
 }
